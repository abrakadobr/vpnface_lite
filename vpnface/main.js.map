{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.paginator.ts","webpack:///./src/app/help-client/help-client.component.css","webpack:///./src/app/help-client/help-client.component.html","webpack:///./src/app/help-client/help-client.component.ts","webpack:///./src/app/help-faq/help-faq.component.css","webpack:///./src/app/help-faq/help-faq.component.html","webpack:///./src/app/help-faq/help-faq.component.ts","webpack:///./src/app/help/help.component.css","webpack:///./src/app/help/help.component.html","webpack:///./src/app/help/help.component.ts","webpack:///./src/app/installer/installer.component.css","webpack:///./src/app/installer/installer.component.html","webpack:///./src/app/installer/installer.component.ts","webpack:///./src/app/installer1/installer1.component.css","webpack:///./src/app/installer1/installer1.component.html","webpack:///./src/app/installer1/installer1.component.ts","webpack:///./src/app/installer2/installer2.component.css","webpack:///./src/app/installer2/installer2.component.html","webpack:///./src/app/installer2/installer2.component.ts","webpack:///./src/app/loader/loader.component.css","webpack:///./src/app/loader/loader.component.html","webpack:///./src/app/loader/loader.component.ts","webpack:///./src/app/logentry.ts","webpack:///./src/app/logger/logger.component.css","webpack:///./src/app/logger/logger.component.html","webpack:///./src/app/logger/logger.component.ts","webpack:///./src/app/logline/logline.component.css","webpack:///./src/app/logline/logline.component.html","webpack:///./src/app/logline/logline.component.ts","webpack:///./src/app/vpnserver/vpnserver.component.css","webpack:///./src/app/vpnserver/vpnserver.component.html","webpack:///./src/app/vpnserver/vpnserver.component.ts","webpack:///./src/app/vpnserver/vpnserver.datasource.ts","webpack:///./src/app/vpnuserdialog/vpnuserdialog.component.css","webpack:///./src/app/vpnuserdialog/vpnuserdialog.component.html","webpack:///./src/app/vpnuserdialog/vpnuserdialog.component.ts","webpack:///./src/app/warn-dialog/warn-dialog.component.css","webpack:///./src/app/warn-dialog/warn-dialog.component.html","webpack:///./src/app/warn-dialog/warn-dialog.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ2C;AACM;AAChB;AAOjC;IAWE,oBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAT5B,YAAO,GAAU,MAAM;QACvB,aAAQ,GAAO,IAAI;QACnB,WAAM,GAAU,EAAE;QAClB,WAAM,GAAU,EAAE;QAClB,YAAO,GAAU,EAAE;QACnB,aAAQ,GAAW,IAAI;QACvB,UAAK,GAAU,EAAE;QAEjB,aAAQ,GAAQ,EAAE;IACc,CAAC;IAExC,QAAQ;IACR,6BAAQ,GAAR;QAEE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,WAAW,CAAC;IAC/C,CAAC;IAED,+BAAU,GAAV;QAAA,iBASC;QAPC,MAAM,CAAC,IAAI,+CAAU,CAAM,UAAC,CAAC;YAC3B,KAAI,CAAC,IAAI,CAAC,GAAG,CAAM,cAAc,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;gBAChD,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM;gBAC1B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACZ,CAAC,CAAC,QAAQ,EAAE;YACd,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,SAAS;IACT,iCAAY,GAAZ;QAEE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YACjB,MAAM,CAAC,EAAE;QACX,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnC,CAAC;IAED,gCAAW,GAAX;QAAA,iBAmBC;QAjBC,IAAI,GAAG,GAAG,EAAE;QACZ,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE;QAC/B,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC;YACd,IAAI,CAAC,GAAG;gBACN,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC3B,KAAK,EAAE,WAAW;aACnB;YACD,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC;gBAClC,CAAC,CAAC,KAAK,GAAG,WAAW;YACvB,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC;gBACpC,CAAC,CAAC,KAAK,GAAG,aAAa;YACzB,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC;gBAClC,CAAC,CAAC,KAAK,GAAG,cAAc;YAC1B,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QACb,CAAC,CAAC;QACF,MAAM,CAAC,GAAG;IACZ,CAAC;IAED,gCAAW,GAAX;QAAA,iBASC;QAPC,MAAM,CAAC,IAAI,+CAAU,CAAM,UAAC,CAAC;YAC3B,KAAI,CAAC,IAAI,CAAC,GAAG,CAAM,cAAc,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;gBAChD,KAAI,CAAC,QAAQ,GAAG,IAAI;gBACpB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACZ,CAAC,CAAC,QAAQ,EAAE;YACd,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAGD,+BAAU,GAAV,UAAW,IAAW;QAEpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,cAAc,GAAC,IAAI,CAAC;IACtD,CAAC;IAED,MAAM;IACN,4BAAO,GAAP,UAAQ,GAAG;QAET,MAAM,CAAC,IAAI,CAAC,YAAY,GAAC,GAAG,EAAC,QAAQ,CAAC;IACxC,CAAC;IAED,8BAAS,GAAT,UAAU,MAAa,EAAC,IAAW;QAAnC,iBAaC;QAXC,MAAM,CAAC,IAAI,+CAAU,CAAM,UAAC,CAAC;YAC3B,KAAI,CAAC,IAAI,CAAC,IAAI,CAAM,aAAa,EAAC;gBAChC,GAAG,EAAE,MAAM;gBACX,GAAG,EAAE,IAAI;aACV,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC;gBACb,KAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,EAAE;oBAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACT,CAAC,CAAC,QAAQ,EAAE;gBACd,CAAC,CAAC;YACJ,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,4BAAO,GAAP,UAAQ,GAAG;QAET,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,WAAW,GAAC,GAAG,CAAC;IAC5C,CAAC;IAED,8BAAS,GAAT,UAAU,GAAG;QAEX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,aAAa,GAAC,GAAG,CAAC;IAC9C,CAAC;IAED,SAAS;IACT,oCAAe,GAAf;QAEE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,SAAS,GAAC,IAAI,CAAC,QAAQ,GAAC,oBAAoB,CAAC;IACzE,CAAC;IAED,2BAAM,GAAN;QAEE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAM,SAAS,GAAC,IAAI,CAAC,QAAQ,GAAC,gBAAgB,EAAC,IAAI,CAAC;IAC5E,CAAC;IAED,8BAAS,GAAT,UAAU,EAAS;QAEjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,gBAAgB,EAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC;IACtD,CAAC;IAzHU,UAAU;QAHtB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAYyB,+DAAU;OAXxB,UAAU,CA4HtB;IAAD,iBAAC;CAAA;AA5HsB;;;;;;;;;;;;ACTvB,sCAAsC,iBAAiB,GAAG,cAAc,iBAAiB,0CAA0C,GAAG,yBAAyB,mBAAmB,GAAG,2BAA2B,sBAAsB,GAAG,uBAAuB,uBAAuB,aAAa,sBAAsB,GAAG,G;;;;;;;;;;;ACA7T,uXAAuX,aAAa,mIAAmI,UAAU,cAAc,SAAS,ieAAie,YAAY,qBAAqB,YAAY,qX;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5gC;AACD;AAC8C;AAG7C;AAS1C;IASE,sBAAoB,MAAc,EAAS,kBAAsC,EAAS,GAAe;QAAzG,iBAKC;QALmB,WAAM,GAAN,MAAM,CAAQ;QAAS,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAS,QAAG,GAAH,GAAG,CAAY;QAPzG,UAAK,GAAU,KAAK;QACpB,YAAO,GAAW,MAAM;QACxB,UAAK,GAAU,EAAE;QACjB,QAAG,GAAW,IAAI;QAClB,YAAO,GAAW,IAAI;QACtB,cAAS,GAAgC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,+DAAW,CAAC,OAAO,CAAC,CAAC;QAG5F,IAAI,CAAC,YAAY,EAAE;QACnB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAC,CAAK;YAC7B,KAAI,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO;QACtB,CAAC,CAAC;IACJ,CAAC;IAED,oCAAa,GAAb,UAAc,EAAE;QAAhB,iBAMC;QAJC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,IAAQ;YACxC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC,WAAW,EAAE;YACnC,EAAE,EAAE;QACN,CAAC,CAAC;IACJ,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAc,EAAC,MAAU;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACX,MAAM,CAAC,MAAM,EAAE;QACjB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,mCAAY,GAAZ;QAAA,iBAUC;QARC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,UAAC,IAAQ;YACvC,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC9B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC;gBACf,UAAU,CAAC;oBACT,KAAI,CAAC,YAAY,EAAE;gBACrB,CAAC,EAAC,IAAI,CAAC;QACX,CAAC,CAAC;IACJ,CAAC;IAED,gCAAS,GAAT,UAAU,EAAgB;QAA1B,iBAgCC;QAhCS,gCAAgB;QAExB,yCAAyC;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,UAAU,IAAI,EAAE,IAAI,OAAO,CAAC,CAChD,CAAC;YACC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAC,UAAU,CAAC;YAC/D,MAAM;QACR,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,EAAE;QACjB,2BAA2B;QAC3B,sBAAsB;QACtB,yCAAyC;QAEzC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;QAE1C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAE3C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAE3C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,CAC5B,CAAC;YACC,IAAI,CAAC,OAAO,GAAG,KAAK;YACpB,IAAI,CAAC,aAAa,CAAC;gBACjB,KAAI,CAAC,GAAG,CAAC,OAAO,GAAC,SAAS;gBAC1B,KAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI;gBACxB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;YACpC,CAAC,CAAC;QACJ,CAAC;IAEH,CAAC;IA3EU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAU4B,sDAAM,EAA6B,sEAAkB,EAAc,uDAAU;OAT9F,YAAY,CA6ExB;IAAD,mBAAC;CAAA;AA7EwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdgC;AACjB;AACI;AACF;AAEZ;AACwB;AAER;AACgC;AACH;AAE3E,mEAAmE;AACsJ;AACnK;AACe;AACM;AACR;AACX;AACN;AACmB;AACY;AACZ;AACE;AACC;AACZ;AACA;AACG;AACV;AACK;AACK;AACV;AACqB;AACA;AACV;AAEhE,IAAM,SAAS,GAAW;IACxB,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,mEAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,yEAAe,EAAE;IAC5C,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,kFAAkB,EAAE;IAClD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,qFAAmB,EAAE;IACpD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,qFAAmB,EAAE;IACpD,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,kFAAkB,EAAE;IACpD,EAAE,IAAI,EAAE,EAAE;QACR,UAAU,EAAE,OAAO;QACnB,SAAS,EAAE,MAAM;KAClB;IACD,EAAE,IAAI,EAAE,IAAI;QACV,UAAU,EAAE,OAAO;QACnB,SAAS,EAAE,MAAM;KAClB;CACF,CAAC;AA0DF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAtDrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,kFAAkB;gBAClB,8FAAsB;gBACtB,kFAAkB;gBAClB,qFAAmB;gBACnB,yEAAe;gBACf,qFAAmB;gBACnB,yEAAe;gBACf,4EAAgB;gBAChB,mEAAa;gBACb,uFAAmB;gBACnB,uFAAmB;gBACnB,8EAAgB;aACjB;YACD,OAAO,EAAE;gBACP,4DAAY,CAAC,OAAO,CAClB,SAAS,EACT,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,8BAA8B;iBACxD;gBACD,uEAAa;gBACb,4FAAuB;gBACvB,yFAAoB;gBACpB,mEAAiB;gBACjB,+DAAa;gBACb,0DAAW;gBACX,yEAAe;gBACf,+DAAa;gBACb,yEAAe;gBACf,4FAAwB;gBACxB,oFAAoB;gBACpB,sFAAqB;gBACrB,+DAAa;gBACb,iEAAe;gBACf,gEAAc;gBACd,oEAAkB;gBAClB,+DAAa;gBACb,sEAAc;gBACd,iEAAY;gBACZ,kEAAgB;gBAChB,kEAAgB;gBAChB,+DAAa;gBACb,wDAAU;gBACV,qEAAgB;gBAChB,0EAAqB;aAEtB;YACD,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,6EAAgB,EAAE,QAAQ,EAAE,kEAAkB,EAAC;aAC3D;YACD,eAAe,EAAE,CAAC,8FAAsB,EAAC,uFAAmB,CAAC;YAC7D,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GyC;AAE/D;IAAwC,sCAAgB;IAAxD;QAAA,qEAmBC;QAjBC,uBAAiB,GAAG,uBAAuB,CAAC;QAC5C,mBAAa,GAAO,oBAAoB,CAAC;QACzC,uBAAiB,GAAG,qBAAqB,CAAC;QAE1C,mBAAa,GAAG,UAAU,IAAI,EAAE,QAAQ,EAAE,MAAM;YAC9C,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;YAC1B,CAAC;YACD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC7B,IAAM,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC;YACnC,2FAA2F;YAC3F,IAAM,QAAQ,GAAG,UAAU,GAAG,MAAM,CAAC,CAAC;gBACpC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzC,UAAU,GAAG,QAAQ,CAAC;YACxB,MAAM,CAAC,UAAU,GAAG,CAAC,GAAG,KAAK,GAAG,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC;QAC7D,CAAC,CAAC;;IAEJ,CAAC;IAAD,yBAAC;AAAD,CAAC,CAnBuC,4EAAgB,GAmBvD;;;;;;;;;;;;;ACrBD,mB;;;;;;;;;;;ACAA,ioG;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAIE;QAFO,WAAM,GAAU,EAAE;IAET,CAAC;IAEjB,sCAAQ,GAAR;IACA,CAAC;IAPU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;;OACW,mBAAmB,CAS/B;IAAD,0BAAC;CAAA;AAT+B;;;;;;;;;;;;ACPhC,yCAAyC,uBAAuB,aAAa,GAAG,G;;;;;;;;;;;ACAhF,m5F;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,mCAAQ,GAAR;IACA,CAAC;IALU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;;SAGzB,CAAC;;OACW,gBAAgB,CAO5B;IAAD,uBAAC;CAAA;AAP4B;;;;;;;;;;;;ACP7B,mCAAmC,iBAAiB,GAAG,qBAAqB,uBAAuB,cAAc,eAAe,gBAAgB,iBAAiB,uBAAuB,GAAG,kBAAkB,uBAAuB,aAAa,gBAAgB,GAAG,6BAA6B,uBAAuB,kBAAkB,GAAG,iBAAiB,eAAe,GAAG,cAAc,gBAAgB,GAAG,OAAO,iHAAiH,wBAAwB,GAAG,iBAAiB,qBAAqB,GAAG,G;;;;;;;;;;;ACA7kB,4pF;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACP;AAO3C;IAEE,uBAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IAEvC,gCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS;QAC3B,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM;QACxB,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI;IAC1B,CAAC;IARU,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAGyB,uDAAU;OAFxB,aAAa,CAUzB;IAAD,oBAAC;CAAA;AAVyB;;;;;;;;;;;;ACR1B,mCAAmC,iBAAiB,GAAG,qBAAqB,uBAAuB,cAAc,eAAe,gBAAgB,iBAAiB,GAAG,kBAAkB,uBAAuB,aAAa,gBAAgB,GAAG,6BAA6B,uBAAuB,kBAAkB,GAAG,iBAAiB,eAAe,GAAG,cAAc,gBAAgB,GAAG,OAAO,iHAAiH,GAAG,G;;;;;;;;;;;ACArf,wyBAAwyB,oQAAoQ,KAAK,MAAM,sI;;;;;;;;;;;;;;;;;;;;;;;;;ACAtgC;AAEN;AAQ3C;IAME,4BAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAJ5B,QAAG,GAAG,EAAE;QACR,UAAK,GAAG,KAAK;QACb,SAAI,GAAG,EAAE;IAEuB,CAAC;IAExC,qCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,kBAAkB;QACpC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK;QACzB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ;IACrC,CAAC;IAED,sCAAS,GAAT;QAAA,iBASC;QANC,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,IAAI,GAAG,iBAAiB;QAC7B,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YAC1C,KAAI,CAAC,GAAG,CAAC,QAAQ,GAAC,IAAI,CAAC,KAAK;YAC5B,KAAI,CAAC,IAAI,GAAG,0IAA0I;QACxJ,CAAC,CAAC;IACJ,CAAC;IAvBU,kBAAkB;QAN9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAQyB,uDAAU;OANxB,kBAAkB,CAyB9B;IAAD,yBAAC;CAAA;AAzB8B;;;;;;;;;;;;ACV/B,mCAAmC,iBAAiB,GAAG,qBAAqB,uBAAuB,cAAc,eAAe,gBAAgB,iBAAiB,GAAG,kBAAkB,uBAAuB,aAAa,gBAAgB,GAAG,6BAA6B,uBAAuB,kBAAkB,GAAG,iBAAiB,eAAe,GAAG,cAAc,gBAAgB,GAAG,qBAAqB,uBAAuB,cAAc,GAAG,G;;;;;;;;;;;ACAvb,2wBAA2wB,iBAAiB,uJAAuJ,iLAAiL,uCAAuC,MAAM,suBAAsuB,mIAAmI,oeAAoe,gyB;;;;;;;;;;;;;;;;;;;;;;;;;;ACA56E;AACgB;AACvB;AAO3C;IASE,6BAAoB,GAAe,EAAS,MAAa,EAAS,KAAqB;QAAnE,QAAG,GAAH,GAAG,CAAY;QAAS,WAAM,GAAN,MAAM,CAAO;QAAS,UAAK,GAAL,KAAK,CAAgB;QAPhF,aAAQ,GAAU,OAAO;QACzB,SAAI,GAAU,EAAE;QAChB,WAAM,GAAG,EAAE;QACX,QAAG,GAAG,EAAE;QACR,UAAK,GAAG,KAAK;QACpB,UAAK,GAAU,WAAW;IAEiE,CAAC;IAE5F,sCAAQ,GAAR;QAAA,iBAYC;QAXC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK;QACzB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,kBAAkB;QACpC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC;YACrC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtB,KAAI,CAAC,KAAK,GAAG,WAAW;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI;gBACjC,KAAI,CAAC,KAAK,GAAG,QAAQ;gBACrB,KAAI,CAAC,QAAQ,EAAE;YACjB,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAED,uCAAS,GAAT;QAAA,iBAiBC;QAfC,IAAI,EAAE,GAAG,6BAA6B;QACtC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC5B,CAAC;YACC,IAAI,CAAC,IAAI,GAAG,aAAa;YACzB,UAAU,CAAC;gBACT,KAAI,CAAC,IAAI,GAAG,EAAE;YAChB,CAAC,EAAC,IAAI,CAAC;YACP,MAAM;QACR,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YACrD,KAAI,CAAC,KAAK,GAAG,KAAK;YAClB,KAAI,CAAC,KAAK,GAAG,QAAQ;YACrB,KAAI,CAAC,QAAQ,EAAE;QACjB,CAAC,CAAC;IACJ,CAAC;IAED,qCAAO,GAAP;QAEE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAC,MAAM,CAAC;IACxC,CAAC;IAED,wCAAU,GAAV;IAEA,CAAC;IAED,sCAAQ,GAAR;QAAA,iBAkBC;QAhBC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC;YAC1B,IAAI,EAAE,UAAC,IAAI;gBACT,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAC,KAAI,CAAC,GAAG,CAAC,QAAQ,GAAC,gBAAgB,CAAC;YACvE,CAAC;YACD,KAAK,EAAE,UAAC,GAAG;gBACT,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;gBAChB,UAAU,CAAC;oBACT,KAAI,CAAC,QAAQ,EAAE;gBACjB,CAAC,EAAC,IAAI,CAAC;YACT,CAAC;YACD,QAAQ,EAAE;gBACR,yBAAyB;YAC3B,CAAC;SACF,CAAC;IACJ,CAAC;IAvEU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAUyB,uDAAU,EAAgB,sDAAM,EAAgB,8DAAc;OAT5E,mBAAmB,CA0E/B;IAAD,0BAAC;CAAA;AA1E+B;;;;;;;;;;;;ACThC,mCAAmC,iBAAiB,GAAG,qBAAqB,uBAAuB,cAAc,eAAe,gBAAgB,iBAAiB,uBAAuB,GAAG,kBAAkB,uBAAuB,aAAa,gBAAgB,GAAG,6BAA6B,uBAAuB,kBAAkB,GAAG,iBAAiB,eAAe,GAAG,cAAc,gBAAgB,GAAG,OAAO,iHAAiH,GAAG,2BAA2B,uBAAuB,aAAa,GAAG,G;;;;;;;;;;;ACA9kB,sYAAsY,uDAAuD,syDAAsyD,qsC;;;;;;;;;;;;;;;;;;;;;;;;;ACAjrE;AACP;AAO3C;IAEE,6BAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAI,CAAC;IAExC,sCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,kBAAkB;QACpC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK;QACzB,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK,IAAI,CAAC,CAAC;IACnD,CAAC;IARU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAGyB,uDAAU;OAFxB,mBAAmB,CAU/B;IAAD,0BAAC;CAAA;AAV+B;;;;;;;;;;;;ACRhC,mCAAmC,iBAAiB,GAAG,qBAAqB,uBAAuB,cAAc,eAAe,gBAAgB,iBAAiB,GAAG,kBAAkB,uBAAuB,aAAa,gBAAgB,GAAG,6BAA6B,uBAAuB,kBAAkB,GAAG,iBAAiB,eAAe,GAAG,cAAc,gBAAgB,GAAG,OAAO,iHAAiH,GAAG,G;;;;;;;;;;;ACArf,+a;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACP;AAO3C;IAEE,yBAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAI,CAAC;IAExC,kCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,UAAU;IAC9B,CAAC;IANU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAGyB,uDAAU;OAFxB,eAAe,CAQ3B;IAAD,sBAAC;CAAA;AAR2B;;;;;;;;;;;;;;ACR5B;AAAA;IAEE,kBACS,IAAgB,EAChB,GAAe,EACf,GAAe;QAFf,gCAAgB;QAChB,8BAAe;QACf,8BAAe;QAFf,SAAI,GAAJ,IAAI,CAAY;QAChB,QAAG,GAAH,GAAG,CAAY;QACf,QAAG,GAAH,GAAG,CAAY;IACtB,CAAC;IAEL,eAAC;AAAD,CAAC;;;;;;;;;;;;;ACRD,4BAA4B,oBAAoB,gBAAgB,eAAe,yBAAyB,gBAAgB,iBAAiB,eAAe,GAAG,iBAAiB,oBAAoB,gBAAgB,eAAe,0BAA0B,iBAAiB,iBAAiB,eAAe,GAAG,K;;;;;;;;;;;ACA7S,uQ;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAGZ;AACK;AAO3C;IAIE,yBAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAF5B,UAAK,GAAc,EAAE;IAEU,CAAC;IAEvC,kCAAQ,GAAR;QAAA,iBAIC;QAHC,WAAW,CAAC;YACV,KAAI,CAAC,UAAU,EAAE;QACnB,CAAC,EAAC,IAAI,CAAC;IACT,CAAC;IAED,oCAAU,GAAV;QAAA,iBAOC;QALC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,UAAC,IAAe;YAC5C,IAAI,CAAC,OAAO,CAAC,UAAC,CAAU;gBACtB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,6BAAG,GAAH;QAEE,IAAM,OAAO,GAAG;YACd,+CAA+C;YAC/C,0CAA0C;YAC1C,oBAAoB;YACpB,uCAAuC;YACvC,kDAAkD;SACnD;QACD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,kDAAQ,CAAC,KAAK,EAAC,IAAI,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAhCU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAKyB,uDAAU;OAJxB,eAAe,CAkC3B;IAAD,sBAAC;CAAA;AAlC2B;;;;;;;;;;;;ACX5B,+BAA+B,mBAAmB,gBAAgB,sBAAsB,0CAA0C,mBAAmB,GAAG,uBAAuB,qBAAqB,GAAG,YAAY,gBAAgB,GAAG,cAAc,gBAAgB,GAAG,kBAAkB,gBAAgB,GAAG,gBAAgB,gBAAgB,GAAG,eAAe,gBAAgB,GAAG,G;;;;;;;;;;;ACAjX,qFAAqF,YAAY,+BAA+B,YAAY,KAAK,WAAW,8FAA8F,YAAY,KAAK,WAAW,8D;;;;;;;;;;;;;;;;;;;;;;;;;ACA7N;AAEnB;AAOtC;IAKE;QAFO,UAAK,GAAU,SAAS;IAEf,CAAC;IAEjB,mCAAQ,GAAR;QAAA,iBAIC;QAHC,UAAU,CAAC;YACT,KAAI,CAAC,WAAW,EAAE;QACpB,CAAC,EAAC,KAAK,CAAC;IACV,CAAC;IAED,sCAAW,GAAX;QAEE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS;IAChE,CAAC;IAdQ;QAAR,2DAAK,EAAE;kCAAO,kDAAQ;mDAAA;IAFZ,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;;OACW,gBAAgB,CAkB5B;IAAD,uBAAC;CAAA;AAlB4B;;;;;;;;;;;;ACT7B,mCAAmC,iBAAiB,GAAG,sBAAsB,iBAAiB,GAAG,aAAa,mBAAmB,GAAG,sBAAsB,0BAA0B,GAAG,gDAAgD,8BAA8B,yBAAyB,GAAG,yBAAyB,mBAAmB,GAAG,yBAAyB,oBAAoB,8BAA8B,GAAG,kBAAkB,uBAAuB,aAAa,GAAG,YAAY,qBAAqB,mBAAmB,wBAAwB,GAAG,G;;;;;;;;;;;ACAtiB,0TAA0T,WAAW,4FAA4F,iBAAiB,g4BAAg4B,UAAU,kpDAAkpD,2BAA2B,oQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAr6F;AACF;AACiB;AACzB;AAEf;AAGsC;AACP;AACX;AAQ/D;IAWE,4BAAmB,MAAiB,EAAS,GAAe,EAAS,MAAa,EAAS,KAAqB;QAA7F,WAAM,GAAN,MAAM,CAAW;QAAS,QAAG,GAAH,GAAG,CAAY;QAAS,WAAM,GAAN,MAAM,CAAO;QAAS,UAAK,GAAL,KAAK,CAAgB;QANhH,qBAAgB,GAAG,CAAC,SAAS,EAAC,MAAM,EAAC,SAAS,CAAC,CAAC;QAIzC,YAAO,GAAM,EAAE;IAE8F,CAAC;IAErH,qCAAQ,GAAR;QAAA,iBAKC;QAJC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI;QACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAC,CAAU;YACvC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAC,CAAC;IACJ,CAAC;IAED,mCAAM,GAAN,UAAO,IAAW;QAAlB,iBAcC;QAZC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,GAAG;YACtC,KAAI,CAAC,GAAG,GAAG,GAAG;YACd,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI;YAC/B,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,IAAI,QAAQ,CAAC;gBAC5B,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,aAAa;YACjC,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC;gBAC1B,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW;YAC/B,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC;gBAC1B,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,cAAc;YAClC,KAAI,CAAC,UAAU,GAAG,IAAI,4EAAsB,CAAC,KAAI,CAAC,GAAG,CAAC,OAAO,EAAC,KAAI,CAAC,SAAS,EAAC,KAAI,CAAC,IAAI,CAAC;YACvF,oCAAoC;QACtC,CAAC,CAAC;IACJ,CAAC;IAED,mCAAM,GAAN;QAAA,iBAUC;QARC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6FAAsB,EAAC;YAC9C,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI;SACpB,CAAC;QACF,CAAC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,GAAG;YAC5B,EAAE,CAAC,CAAC,GAAG,CAAC;gBACN,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAO,GAAP,UAAQ,GAAU;QAEhB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzC,CAAC;IAED,oCAAO,GAAP,UAAQ,GAAU;QAAlB,iBAmBC;QAjBC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sFAAmB,EAAC;YAC3C,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE;gBACJ,KAAK,EAAE,8GAAuB,GAAG,OAAI;gBACrC,OAAO,EAAE,kIAAkI;gBAC3I,EAAE,EAAE,eAAe;aACpB;SACF,CAAC;QACF,CAAC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,MAAoB;YAApB,uCAAoB;YAC7C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACV,MAAM;YACR,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,IAAI;YACtB,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAC,GAAG,GAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,GAAG;gBACpD,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC1B,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,KAAK;YACzB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,sCAAS,GAAT,UAAU,GAAU;QAApB,iBAmBC;QAjBC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sFAAmB,EAAC;YAC3C,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE;gBACJ,KAAK,EAAE,oHAAwB,GAAG,OAAI;gBACtC,OAAO,EAAE,iDAAiD;gBAC1D,EAAE,EAAE,gBAAgB;aACrB;SACF,CAAC;QACF,CAAC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,QAAsB;YAAtB,2CAAsB;YAC/C,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;gBACZ,MAAM;YACR,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,IAAI;YACtB,KAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAC,GAAG,GAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,GAAG;gBACtD,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC1B,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,KAAK;YACzB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IA3FwB;QAAxB,+DAAS,CAAC,8DAAY,CAAC;kCAAY,8DAAY;yDAAC;IAC7B;QAAnB,+DAAS,CAAC,yDAAO,CAAC;kCAAO,yDAAO;oDAAC;IAHvB,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAY2B,kEAAS,EAAc,uDAAU,EAAgB,sDAAM,EAAgB,8DAAc;OAXrG,kBAAkB,CA+F9B;IAAD,yBAAC;CAAA;AA/F8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBuB;AAEjB;AACwB;AAG7D;IAA4C,0CAAqB;IAE/D,gCAAmB,IAAiB,EAAS,SAAuB,EAAU,IAAa;QAA3F,YACE,iBAAO,SACR;QAFkB,UAAI,GAAJ,IAAI,CAAa;QAAS,eAAS,GAAT,SAAS,CAAc;QAAU,UAAI,GAAJ,IAAI,CAAS;;IAE3F,CAAC;IAED,wCAAO,GAAP;QAAA,iBAYC;QAXC,IAAM,aAAa,GAAG;YACpB,+CAAY,CAAC,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI;YACnB,IAAI,CAAC,IAAI,CAAC,UAAU;SACrB,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAEzC,MAAM,CAAC,0CAAK,eAAI,aAAa,EAAE,IAAI,CAAC,0DAAG,CAAC;YACtC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAI,CAAC,aAAa,CAAK,KAAI,CAAC,IAAI,SAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,2CAAU,GAAV,cAAc,CAAC;IAEP,6CAAY,GAApB,UAAqB,IAAiB;QACpC,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEO,8CAAa,GAArB,UAAsB,IAAiB;QAAvC,iBAaC;QAZC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACpB,IAAM,KAAK,GAAG,KAAI,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;YAC5C,MAAM,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,KAAK,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACnD,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAChE,SAAS,MAAM,CAAC,CAAC,CAAC;YACpB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,6BAAC;AAAD,CAAC,CAzC2C,mEAAU,GAyCrD;;AAED,iBAAiB,CAAC,EAAE,CAAC,EAAE,KAAK;IAC1B,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC;;;;;;;;;;;;ACnDD,+BAA+B,eAAe,GAAG,SAAS,sBAAsB,GAAG,aAAa,mBAAmB,GAAG,G;;;;;;;;;;;ACAtH,8cAA8c,iBAAiB,uGAAuG,KAAK,MAAM,4EAA4E,8hB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA3mB;AACiC;AACxC;AAO3C;IAME,gCAAoB,GAAc,EAAQ,SAA+C,EAAkC,IAAS;QAAhH,QAAG,GAAH,GAAG,CAAW;QAAQ,cAAS,GAAT,SAAS,CAAsC;QAAkC,SAAI,GAAJ,IAAI,CAAK;QAJ7H,aAAQ,GAAW,EAAE;QACrB,SAAI,GAAU,EAAE;QAChB,UAAK,GAAW,KAAK;IAE4G,CAAC;IAEzI,yCAAQ,GAAR,UAAS,CAAC;QACR,EAAE,EAAC,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC;YACjB,IAAI,CAAC,EAAE,EAAE;IACb,CAAC;IAED,mCAAE,GAAF;QAAA,iBAeC;QAbC,IAAI,EAAE,GAAG,6BAA6B;QACtC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC5B,CAAC;YACC,IAAI,CAAC,IAAI,GAAG,aAAa;YACzB,UAAU,CAAC;gBACT,KAAI,CAAC,IAAI,GAAG,EAAE;YAChB,CAAC,EAAC,IAAI,CAAC;YACP,MAAM;QACR,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,UAAC,EAAE;YACvD,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAI,CAAC,QAAQ,CAAC;QACrC,CAAC,CAAC;IACJ,CAAC;IA5BU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;QAO4F,uEAAM,CAAC,wEAAe,CAAC;yCAA3F,uDAAU,EAAmB,qEAAY;OANtD,sBAAsB,CA6BlC;IAAD,6BAAC;CAAA;AA7BkC;;;;;;;;;;;;ACTnC,+BAA+B,eAAe,GAAG,SAAS,sBAAsB,wBAAwB,GAAG,aAAa,mBAAmB,GAAG,G;;;;;;;;;;;ACA9I,sDAAsD,YAAY,+RAA+R,SAAS,qE;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAhT;AACyB;AAOnF;IAEE,6BAAmB,SAA4C,EAAkC,IAAS;QAAvF,cAAS,GAAT,SAAS,CAAmC;QAAkC,SAAI,GAAJ,IAAI,CAAK;IAAI,CAAC;IAE/G,sCAAQ,GAAR;IACA,CAAC;IALU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;QAGkE,uEAAM,CAAC,wEAAe,CAAC;yCAA3D,qEAAY;OAF/B,mBAAmB,CAO/B;IAAD,0BAAC;CAAA;AAP+B;;;;;;;;;;;;;;ACRhC;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { Observable } from 'rxjs'\nimport { Vpnserver } from './vpnserver'\nimport { Logentry } from './logentry'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIService {\n\n  public _status:string = 'none'\n  public _servers:any = null\n  public _title:string = ''\n  public _ticon:string = ''\n  public _mtitle:string = ''\n  public _hasMenu:boolean = true\n  public _load:string = ''\n\n  public _adminIP:string=''\n  constructor(private http:HttpClient) { }\n\n  //common\n  lastLogs()\n  {\n    return this.http.get<Logentry[]>('/api/logs')\n  }\n\n  loadStatus()\n  {\n    return new Observable<any>((o)=>{\n      this.http.get<any>('/api/status/').subscribe((data)=>{\n        this._status = data.status\n        o.next(data)\n        o.complete()\n      })\n    })\n  }\n\n  //SERVERS\n  serversCodes()\n  {\n    if (!this._servers)\n      return []\n    return Object.keys(this._servers)\n  }\n \n  serversList()\n  {\n    let ret = []\n    let codes = this.serversCodes()\n    codes.forEach((c)=>{\n      let o = {\n        code: c,\n        name: this._servers[c].name,\n        cloud: 'cloud_off'\n      }\n      if (this._servers[c].type == 'root')\n        o.cloud = 'cloud_off'\n      if (this._servers[c].type == 'public')\n        o.cloud = 'cloud_queue'\n      if (this._servers[c].type == 'dark')\n        o.cloud = 'cloud_circle'\n      ret.push(o)\n    })\n    return ret\n  }\n\n  loadServers()\n  {\n    return new Observable<any>((o)=>{\n      this.http.get<any>('/api/vpnlist').subscribe((data)=>{\n        this._servers = data\n        o.next(data)\n        o.complete()\n      })\n    })\n  }\n \n\n  loadServer(code:string)\n  {\n    return this.http.get<Vpnserver>('/api/server/'+code)\n  }\n\n  //KEYS\n  grabKey(key)\n  {\n    window.open('/api/ovpn/'+key,'_blank')\n  }\n\n  createKey(server:string,name:string)\n  {\n    return new Observable<any>((o)=>{\n      this.http.post<any>('/api/gencli',{\n        srv: server,\n        cli: name\n      }).subscribe((d)=>{\n        this.loadServers().subscribe((dd)=>{\n          o.next(d)\n          o.complete()\n        })\n      })\n    })\n  }\n\n  lockKey(key)\n  {\n    return this.http.get<any>('api/lock/'+key)\n  }\n\n  unlockKey(key)\n  {\n    return this.http.get<any>('api/unlock/'+key)\n  }\n\n  //install\n  finilizeInstall()\n  {\n    return this.http.get<any>('http://'+this._adminIP+':8808/api/finilize')\n  }\n\n  ping10()\n  {\n    return this.http.jsonp<any>('http://'+this._adminIP+':8808/api/ping','cb')\n  }\n\n  confirmIP(ip:string)\n  {\n    return this.http.post<any>('/api/confirmip',{ip:ip})\n  }\n\n\n}\n","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n  box-shadow: 3px 0 6px rgba(0,0,0,.24);\\n}\\n\\n.toolbar-hor-spacer {\\n  flex: 1 1 auto;\\n}\\n\\nmat-nav-list mat-icon {\\n  margin-right: 4pt;\\n}\\n\\n.tb-icon mat-icon {\\n  position: relative;\\n  top: 4pt;\\n  margin-right: 8px;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"isHandset ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset | async)!.matches ? 'over' : 'side'\\\"\\n    [opened]=\\\"(!(isHandset | async)!.matches)&&api._hasMenu\\\">\\n    <mat-toolbar color=\\\"primary\\\">{{api._mtitle}}</mat-toolbar>\\n    <mat-nav-list *ngFor=\\\"let cd of _menu\\\">\\n      <a mat-list-item (click)=\\\"goto(cd.code,drawer)\\\"><mat-icon>{{cd.cloud}}</mat-icon> {{cd.name}}</a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\">\\n      <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"drawer.toggle()\\\"\\n        *ngIf=\\\"((isHandset | async)!.matches)&&api._hasMenu\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">more_vert</mat-icon>\\n      </button>\\n      <span><span class=\\\"tb-icon\\\" *ngIf=\\\"api._ticon != ''\\\"><mat-icon>{{api._ticon}}</mat-icon> </span>{{api._title}}</span>\\n      <span class=\\\"toolbar-hor-spacer\\\"></span>\\n      <button *ngIf=\\\"api._hasMenu\\\" mat-button class=\\\"more-button\\\" aria-label=\\\"Справка\\\" routerLink=\\\"help\\\">\\n        <mat-icon>help_outline</mat-icon>\\n      </button>\\n    </mat-toolbar>\\n\\n    <router-outlet></router-outlet>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n<app-logger></app-logger>\\n\"","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material'\nimport { Observable } from 'rxjs';\nimport { APIService } from './api.service'\nimport { VpnuserdialogComponent } from './vpnuserdialog/vpnuserdialog.component'\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title:string = 'app'\n  _status: string = 'none'\n  _menu: any[] = []\n  _hs:boolean = true\n  _doNext:boolean = true\n  isHandset: Observable<BreakpointState> = this.breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(private router: Router,private breakpointObserver: BreakpointObserver,private api: APIService) {\n    this.updateStatus()\n    this.isHandset.subscribe((d:any)=>{\n      this._hs = d.matches\n    })\n  }\n\n  updateServers(cb)\n  {\n    this.api.loadServers().subscribe((data:any)=>{\n      this._menu = this.api.serversList()\n      cb()\n    })\n  }\n\n  goto(srvCode:string,drawer:any)\n  {\n    if (this._hs)\n      drawer.toggle()\n    this.router.navigate(['vpn',srvCode])\n  }\n\n  updateStatus()\n  {\n    this.api.loadStatus().subscribe((data:any)=>{\n      if (this._status != data.status)\n        this.setStatus(data.status)\n      if (this._doNext)\n        setTimeout(()=>{\n          this.updateStatus()\n        },1000)\n    })\n  }\n\n  setStatus(st:string='none')\n  {\n    //special single case on install finished\n    if (this._status == 'install2' && st == 'ready')\n    {\n      window.location.replace('http://'+this.api._adminIP+'/vpn/adm')\n      return\n    }\n    this._status = st\n    //this._status = 'install2'\n    //this._doNext = false\n    //console.log(['setStatus',this._status])\n\n    if (this._status == 'install0')\n      return this.router.navigate(['install'])\n\n    if (this._status == 'install1')\n      return this.router.navigate(['install1'])\n\n    if (this._status == 'install2')\n      return this.router.navigate(['install2'])\n\n    if (this._status == 'ready')\n    {\n      this._doNext = false\n      this.updateServers(()=>{\n        this.api._mtitle='Сервера'\n        this.api._hasMenu = true\n        this.router.navigate(['vpn/inet'])\n      })\n    }\n\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { HttpModule } from '@angular/http'\nimport { HttpClientModule, HttpClient, HttpClientJsonpModule\n } from '@angular/common/http'\nimport { RouterModule, Routes } from '@angular/router'\n\nimport { AppComponent } from './app.component'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations'\n\n//import { MainpageComponent } from './mainpage/mainpage.component'\nimport { MatGridListModule, MatCardModule, MatMenuModule, MatIconModule, MatButtonModule, MatTableModule, MatPaginatorModule, MatSortModule, MatToolbarModule, MatSidenavModule, MatListModule } from '@angular/material'\nimport {MatInputModule} from '@angular/material/input'\nimport {MatButtonToggleModule} from '@angular/material/button-toggle'\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner'\nimport {MatProgressBarModule} from '@angular/material/progress-bar'\nimport {MatSelectModule} from '@angular/material/select'\nimport { LayoutModule } from '@angular/cdk/layout'\nimport { VpnserverComponent } from './vpnserver/vpnserver.component';\nimport { VpnuserdialogComponent } from './vpnuserdialog/vpnuserdialog.component';\nimport { InstallerComponent } from './installer/installer.component';\nimport { Installer1Component } from './installer1/installer1.component'\nimport { Installer2Component } from './installer2/installer2.component';\nimport { LoaderComponent } from './loader/loader.component';\nimport { LoggerComponent } from './logger/logger.component';\nimport { LoglineComponent } from './logline/logline.component';\nimport { HelpComponent } from './help/help.component'\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatPaginatorIntlRu } from './app.paginator';\nimport { WarnDialogComponent } from './warn-dialog/warn-dialog.component';\nimport { HelpClientComponent } from './help-client/help-client.component';\nimport { HelpFaqComponent } from './help-faq/help-faq.component'\n\nconst appRoutes: Routes = [\n  { path: 'help', component: HelpComponent },\n  { path: 'load', component: LoaderComponent },\n  { path: 'install', component: InstallerComponent },\n  { path: 'install1', component: Installer1Component },\n  { path: 'install2', component: Installer2Component },\n  { path: 'vpn/:code', component: VpnserverComponent },\n  { path: '',\n    redirectTo: '/load',\n    pathMatch: 'full'\n  },\n  { path: '**',\n    redirectTo: '/load',\n    pathMatch: 'full'\n  }\n];\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    VpnserverComponent,\n    VpnuserdialogComponent,\n    InstallerComponent,\n    Installer2Component,\n    LoaderComponent,\n    Installer1Component,\n    LoggerComponent,\n    LoglineComponent,\n    HelpComponent,\n    WarnDialogComponent,\n    HelpClientComponent,\n    HelpFaqComponent\n  ],\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: false } // <-- debugging purposes only\n    ),\n    BrowserModule,\n    BrowserAnimationsModule,\n    NoopAnimationsModule,\n    MatGridListModule,\n    MatCardModule,\n    FormsModule,\n    MatDialogModule,\n    MatMenuModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatButtonToggleModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatInputModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    HttpModule,\n    HttpClientModule,\n    HttpClientJsonpModule\n\n  ],\n  providers: [\n    { provide: MatPaginatorIntl, useClass: MatPaginatorIntlRu}\n  ],\n  entryComponents: [VpnuserdialogComponent,WarnDialogComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { MatPaginatorIntl } from '@angular/material/paginator';\n\nexport class MatPaginatorIntlRu extends MatPaginatorIntl {\n\n  itemsPerPageLabel = 'Элементов на странице';\n  nextPageLabel     = 'Следующая страница';\n  previousPageLabel = 'Предыдущая страница';\n    \n  getRangeLabel = function (page, pageSize, length) {\n    if (length === 0 || pageSize === 0) {\n      return '0 из ' + length;\n    }\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n      Math.min(startIndex + pageSize, length) :\n      startIndex + pageSize;\n    return startIndex + 1 + ' - ' + endIndex + ' из ' + length;\n  };\n    \n}\n","module.exports = \"\"","module.exports = \"          <mat-form-field>\\n            <mat-select [(value)]=\\\"_cliOS\\\" placeholder=\\\"Инструкция для\\\">\\n              <mat-option value='win'>Windows</mat-option>\\n              <mat-option value='linux'>Linux</mat-option>\\n              <mat-option value='macos'>MacOS</mat-option>\\n              <mat-option value='android'>Android</mat-option>\\n              <mat-option value='ios'>iOS</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n          <br/>\\n          <p *ngIf=\\\"_cliOS == ''\\\" class=\\\"mat-body-1\\\">\\n          Выберите вашу операционную систему из списка, что бы увидеть инструкции.\\n          </p>\\n\\n          <div *ngIf=\\\"_cliOS == 'win'\\\">\\n            <p  class=\\\"mat-body-1\\\">\\n  Оффициальный клиент OpenVPN можно скачать с <a href=\\\"https://openvpn.net/index.php/open-source/downloads.html\\\" target=\\\"_blank\\\">этой страницы</a>. Последнюю версию (на момент создания проекта) можно скачать по <a href=\\\"https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.6-I602.exe\\\" target=\\\"_blank\\\">этой прямой ссылке</a>.\\n            </p>\\n            <p class=\\\"mat-body-1\\\">\\n              После установки, надо загрузить ключ с настройками подключения в установленный клиент. Подробную инструкцию (в картинках) по установке и загрузке файла ключа можно посмотреть, к примеру, <a href=\\\"https://buffered.com/tutorials/setup-openvpn-client-windows-7/\\\" target=\\\"_blank\\\">здесь</a>\\n            </p>\\n          </div>\\n\\n          <div *ngIf=\\\"_cliOS == 'linux'\\\">\\n            <p  class=\\\"mat-body-1\\\">\\n              В основных linux системах, openvpn пакет установлен, и vpn соединяния управляются сетевым менеджером. Обычно, требуется установить дополнительный пакет для удобного создания vpn подключений из *.ovpn файлов.\\n            </p>\\n            <p class=\\\"mat-body-1\\\">\\n              Например в linux ubuntu/debian:<br/>\\n              <code>apt-get install network-manager-openvpn-gnome</code>\\n              <br/>\\n              После установке, выберите пункт \\\"редактировать соединения\\\" в меню сетевого менеджера, и добавьте новое из скачаного ovpn файла ключа.\\n            </p>\\n          </div>\\n\\n          <div *ngIf=\\\"_cliOS == 'macos'\\\">\\n            <p  class=\\\"mat-body-1\\\">\\n            Для MacOS требуется установить программу <a href=\\\"https://tunnelblick.net/index.html\\\" target=\\\"_blank\\\">TunnelBlick</a>. Инструкции по загрузке ovpn файла ключа в установленный tunelblik можно посмотреть <a href=\\\"https://tunnelblick.net/czUsing.html\\\" target=\\\"_blank\\\">тут</a>.\\n            </p>\\n          </div>\\n\\n          <div *ngIf=\\\"_cliOS == 'android'\\\">\\n            <p  class=\\\"mat-body-1\\\">\\n            Официальный android OpenVPN клиент можно установить из <a href=\\\"https://play.google.com/store/apps/details?id=net.openvpn.openvpn\\\" target=\\\"_blank\\\">Google Play</a>.\\n            </p>\\n          </div>\\n\\n          <div *ngIf=\\\"_cliOS == 'ios'\\\">\\n            <p  class=\\\"mat-body-1\\\">\\n            Официальный iOS OpenVPN клиент можно установить из <a href=\\\"https://itunes.apple.com/us/app/openvpn-connect/id590379981\\\" target=\\\"_blank\\\">App Store</a>.\\n            </p>\\n          </div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-help-client',\n  templateUrl: './help-client.component.html',\n  styleUrls: ['./help-client.component.css']\n})\nexport class HelpClientComponent implements OnInit {\n\n  public _cliOS:string = ''\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"p.mat-body-1 mat-icon {\\n  position: relative;\\n  top: 4pt;\\n}\\n\"","module.exports = \"          <h3 class=\\\"mat-h3\\\">Сколько человек я могу подключить к своим VPN серверам?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Сколько угодно. Но имейте в виду, что каждое активное соединение потребляет ресурсы (оперативную память и процессор) сервера. Если у вас слабый сервер, при большом количестве активных соединений сервер может замедлиться в работе и VPN соединения начнут работать с перебоями. Для минимальной безопасности, сервера по умолчанию настроены на максимум 100 одновременных соединений. Если вы уверены в мощности своего сервера - вы можете изменить эти настройки (для этого требуются навыки системного администрирования. обратитесь к <a href=\\\"http://10.1.0.1:81\\\" target=\\\"_blank\\\">документации</a> для подробностей)\\n          </p>\\n          <h3 class=\\\"mat-h3\\\">После подключения к TOR я становлюсь анонимным?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Анонимность в интернете - это целый комплекс мер, и анонимизация своего IP - только одна из них. Просто подключение через сеть TOR не обеспечивает вашей анонимности, имейте это в виду. Почитайте в интернете более подробную информацию и проведите соответсвующие меры, для уверености в своей анонимности.\\n          </p>\\n          <h3 class=\\\"mat-h3\\\">Могу ли я изменить настройки серверов и клиентов?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          VPNFace Light использует OpenSource компоненты, и просто устанавливает ряд конфигураций для них. Всё это может быть изменено и перенастроено человеком со знаниями и навыками linux системного администратора. Обратитесь к <a href=\\\"http://10.1.0.1:81\\\" target=\\\"_blank\\\">документации</a> для подробностей.\\n          </p>\\n          <h3 class=\\\"mat-h3\\\">Почему пропадает интернет во время подключения к администраторскому VPN серверу?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Администраторский сервер по умолчанию, для безопасности, настроен без доступа в интернет.\\n          </p>\\n          <h3 class=\\\"mat-h3\\\">Почему я не могу удалить ключ?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Каждый пользовательсткий ovpn файл содержит в себе ключи подключения к серверу. OpenVPN создаёт их разово при установке и использует их в дальнейшем для всех клиентов, в связи с чем просто удаление ключа не обеспечит безопасности - требуется специальная запись о блокировке ключа. Используйте опции \\\"заблокировать\\\" (<mat-icon>no_encryption</mat-icon>) и \\\"разблокировать\\\" (<mat-icon>vpn_lock</mat-icon>) для управления ключами.\\n          </p>\\n          <h3 class=\\\"mat-h3\\\">Я потерял администраторский ключ и не могу больше попасть в админку. Всё пропало?</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Конечно нет. Но без навыков системного администрирования тут не обойтись. Подключитесь к вашему серверу через веб консоль хостера, и посмотрите <a href=\\\"http://10.1.0.1:81\\\" target=\\\"_blank\\\">документацию</a> для того, что бы найти ваши ключи на сервере.\\n          </p>\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-help-faq',\n  templateUrl: './help-faq.component.html',\n  styleUrls: ['./help-faq.component.css']\n})\nexport class HelpFaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n  overflow-y: scroll;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n  margin: 0 8pt;\\n}\\n\\n.full-width {\\n  width: 50%;\\n}\\n\\n.err-msg {\\n  color: #f00;\\n}\\n\\np {\\n  font-family: Roboto,\\\"Helvetica Neue Light\\\",\\\"Helvetica Neue\\\",Helvetica,Arial,\\\"Lucida Grande\\\",sans-serif;\\n  text-align: justify;\\n}\\n\\n.card-faq p {\\n  margin-left: 8pt;\\n}\\n\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">Как установить OpenVPN на устройство</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"300\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content>\\n          <app-help-client></app-help-client>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n  <br/>\\n  <h1 class=\\\"mat-h1\\\">Вопросы и ответы</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"300\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card card-faq\\\">\\n        <mat-card-content>\\n          <app-help-faq></app-help-faq>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n\\n  <br/>\\n  <h1 class=\\\"mat-h1\\\">О VPNFace Light</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"300\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content>\\n          <p class=\\\"mat-body-1\\\">\\n          VPNFace Light - менеджер ключей для OpenVPN.\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n          По умолчанию программа устанавливает три VPN сервера для различных видов подключений, и лимитирует количество одновременных соединений с каждым сервером 100 пользователям. Это не является программным ограничением и может быть переконфигурировано системным администратором.\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n          VPNFace Light использует OpenSource компоненты: <a href=\\\"https://openvpn.net/\\\" target=\\\"_blank\\\">openvpn</a>, <a href=\\\"https://github.com/OpenVPN/easy-rsa\\\" target=\\\"_blank\\\">easy-rsa</a>, <a href=\\\"https://git-scm.com/\\\" target=\\\"_blank\\\">git</a>, <a href=\\\"https://www.torproject.org\\\" target=\\\"_blank\\\">tor</a>, <a href=\\\"https://www.nginx.com/\\\" target=\\\"_blank\\\">nginx</a>,<a href=\\\"https://nodejs.org\\\" target=\\\"_blank\\\">nodejs</a>, <a href=\\\"https://angular.io/\\\" target=\\\"_blank\\\">angularjs</a>, и распространяется бесплатно и без ограничений по использованию.\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n          Если вы хотите подключить VPNFace Light к уже работающим OpenVPN серверам - обратитесь к <a href=\\\"http://10.1.0.1:81\\\" target=\\\"_blank\\\">документации</a>.\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n          Программа VPNFace Light разработана в поддержку движения DIGITAL RESISTANCE. Автор: <a href=\\\"https://github.com/abrakadobr/\\\" target=\\\"_blank\\\">abrakadobr</a><br/>\\n          Поблагодарить: BTC 1EzMFMyiGEqcjjHD8dvgrn4YsXwvgeDyVD\\n          </p>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.component.html',\n  styleUrls: ['./help.component.css']\n})\nexport class HelpComponent implements OnInit {\n\n  constructor(private api: APIService) {}\n\n  ngOnInit() {\n    this.api._title = 'Справка'\n    this.api._ticon = 'help'\n    this.api._hasMenu = true\n  }\n\n}\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n  margin: 0 8pt;\\n}\\n\\n.full-width {\\n  width: 50%;\\n}\\n\\n.err-msg {\\n  color: #f00;\\n}\\n\\np {\\n  font-family: Roboto,\\\"Helvetica Neue Light\\\",\\\"Helvetica Neue\\\",Helvetica,Arial,\\\"Lucida Grande\\\",sans-serif;\\n}\\n\"","module.exports = \"<div\\n  class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">IP адрес сервера</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"200\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n            <mat-form-field class=\\\"full-width\\\">\\n              <input\\n                matInput\\n                required\\n                maxlength=\\\"16\\\"\\n                [disabled]=\\\"_load\\\"\\n                [(ngModel)]=\\\"_ip\\\"\\n                placeholder=\\\"Адрес\\\">\\n              <mat-hint>Подтвердите авто-определение, или укажите корректный адрес</mat-hint>\\n            </mat-form-field>\\n            <br/>\\n            <button\\n              mat-button\\n              style=\\\"margin: 4pt 0;\\\"\\n              [disabled]=\\\"_load\\\"\\n              (click)=\\\"confirmIP()\\\">Подтвердить</button>\\n\\n            <div *ngIf=\\\"_load\\\" >\\n              <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n              <mat-hint style=\\\"font-size:80%;\\\">{{_log}}</mat-hint>\\n            </div>\\n\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core'\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router'\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-installer',\n  templateUrl: './installer.component.html',\n  styleUrls: ['./installer.component.css']\n})\n\nexport class InstallerComponent implements OnInit {\n\n  public _ip = ''\n  public _load = false\n  public _log = ''\n\n  constructor(private api: APIService) { }\n\n  ngOnInit() {\n    this.api._title = 'Установка. шаг 1'\n    this.api._hasMenu = false\n    this._ip = window.location.hostname\n  }\n\n  confirmIP()\n  {\n\n    this._load = true\n    this._log = 'Сохраняем адрес'\n    this.api.confirmIP(this._ip).subscribe((data)=>{\n      this.api._adminIP=data.admIP\n      this._log = 'Создаётся администраторский VPN. Генерация ключей безопасности на слабых серверах может длиться до 10 минут. Не закрывайте эту страницу.'\n    })\n  }\n\n}\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n  margin: 0 8pt;\\n}\\n\\n.full-width {\\n  width: 50%;\\n}\\n\\n.err-msg {\\n  color: #f00;\\n}\\n\\nbutton mat-icon {\\n  position: relative;\\n  top: -2pt;\\n}\\n\"","module.exports = \"<div\\n  *ngIf=\\\"state == 'createacc'\\\"\\n  class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">Создание администраторского подключения</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"200\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n            <mat-form-field class=\\\"full-width\\\">\\n              <input\\n                matInput\\n                required\\n                maxlength=\\\"16\\\"\\n                [disabled]=\\\"_load\\\"\\n                [(ngModel)]=\\\"_account\\\"\\n                placeholder=\\\"Название аккаунта\\\">\\n              <mat-hint>Английские буквы и цифры. Первый символ - буква.</mat-hint>\\n              <mat-hint align=\\\"end\\\">{{_account.length}} / 16</mat-hint>\\n            </mat-form-field>\\n            <br/>\\n            <button\\n              mat-button\\n              style=\\\"margin: 4pt 0;\\\"\\n              [disabled]=\\\"_load\\\"\\n              (click)=\\\"createAcc()\\\">Создать!</button>\\n            <div\\n              class=\\\"err-msg mat-body-2\\\" style=\\\"margin:4pt;\\\"\\n              *ngIf=\\\"_err!=''\\\">{{_err}}</div>\\n\\n            <div *ngIf=\\\"_load\\\" >\\n              <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n            </div>\\n\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\\n<div class=\\\"grid-container\\\" *ngIf=\\\"state=='wait10'\\\">\\n  <h1 class=\\\"mat-h1\\\">Установка клиента</h1>\\n  <h3 class=\\\"mah-h3\\\">Не закрывайте эту страницу</h3>\\n\\n  <mat-grid-list cols=\\\"2\\\" [rowHeight]=\\\"150\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-subtitle>1. Скачайте файл ключа</mat-card-subtitle>\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n          <p class=\\\"mat-body-1\\\" style=\\\"margin-top:0pt;\\\">\\n              <button\\n                mat-button\\n                color=\\\"primary\\\"\\n                style=\\\"margin-top: 0pt;\\\"\\n                (click)=\\\"grabKey()\\\"><mat-icon>get_app</mat-icon> Скачать Ключ</button>\\n          </p>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n\\n\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-subtitle>2. Подключите VPN на этом устройстве</mat-card-subtitle>\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n          <p class=\\\"mat-body-1\\\" style=\\\"margin-top:20pt;\\\">\\n              <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n              <mat-hint class=\\\"hint\\\">Ожидаю VPN подключения</mat-hint>\\n          </p>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\\n<div class=\\\"grid-container\\\" *ngIf=\\\"state=='wait10'\\\">\\n\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"350\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-subtitle>Инструкции по установке OpenVPN клиента</mat-card-subtitle>\\n        <mat-card-content class=\\\"dashboard-card-content\\\" style=\\\"text-align:left\\\">\\n          <app-help-client></app-help-client>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n\\n  </mat-grid-list>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router'\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-installer1',\n  templateUrl: './installer1.component.html',\n  styleUrls: ['./installer1.component.css']\n})\nexport class Installer1Component implements OnInit {\n\n  public _account:string = 'admin'\n  public _err:string = ''\n  public _cliOS = ''\n  public _ip = ''\n  public _load = false\n  state:string = 'createacc'\n\n  constructor(private api: APIService,private router:Router,private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.api._hasMenu = false\n    this.api._title = 'Установка. шаг 2'\n    this.api.loadServer('adm').subscribe((s)=>{\n      if (!s.clients.length) {\n        this.state = 'createacc'\n      } else {\n        this._account = s.clients[0].code\n        this.state = 'wait10'\n        this.nextPing()\n      }\n    })\n  }\n\n  createAcc()\n  {\n    let rx = /^[a-zA-Z][a-zA-Z0-9]{1,15}$/\n    if (!rx.test(this._account))\n    {\n      this._err = 'Некорректно'\n      setTimeout(()=>{\n        this._err = ''\n      },2000)\n      return\n    }\n    this._load = true\n    this.api.createKey('adm',this._account).subscribe((data)=>{\n      this._load = false\n      this.state = 'wait10'\n      this.nextPing()\n    })\n  }\n\n  grabKey()\n  {\n    this.api.grabKey(this._account+'@adm')\n  }\n\n  getCliSoft()\n  {\n  }\n\n  nextPing()\n  {\n    console.log('next ping')\n    this.api.ping10().subscribe({\n      next: (ping)=>{\n        console.log(['ping!',ping])\n        window.location.replace('http://'+this.api._adminIP+':8808/install2')\n      },\n      error: (err)=>{\n        console.log(err)\n        setTimeout(()=>{\n          this.nextPing()\n        },1000)\n      },\n      complete: ()=>{\n        //console.log('complete')\n      }\n    })\n  }\n\n\n}\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n  overflow-y: scroll;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n  margin: 0 8pt;\\n}\\n\\n.full-width {\\n  width: 50%;\\n}\\n\\n.err-msg {\\n  color: #f00;\\n}\\n\\np {\\n  font-family: Roboto,\\\"Helvetica Neue Light\\\",\\\"Helvetica Neue\\\",Helvetica,Arial,\\\"Lucida Grande\\\",sans-serif;\\n}\\n\\np.mat-body-1 mat-icon {\\n  position: relative;\\n  top: 4pt;\\n}\\n\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">Завершение установки</h1>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"300\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-subtitle>Поздравляем!</mat-card-subtitle>\\n        <mat-card-content class=\\\"dashboard-card-content\\\" style=\\\"text-align:left;\\\">\\n          <mat-progress-bar style=\\\"margin: 4pt 0;\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n          <br/>\\n          <p class=\\\"mat-body-1\\\">\\n            Вы успешно установили себе OpenVPN клиент, загрузили в него ключ соединения и подключились к своему серверу!\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n            Не закрывайте эту страницу!\\n          </p>\\n          <p class=\\\"mat-body-1\\\">\\n            Сейчас происходит завершение установки и подготовка сервера к работе. Финальная часть установки занимает в среднем в два раза больше времени, чем предыдущий шаг.\\n          </p>\\n          <ul class=\\\"steps\\\">\\n            <li>Создание \\\"Интернет VPN\\\" сервера. Пользователи, подключившиеся к этому впн будут выходить в интернет сразу с сервера. Для всего интернета ip адрес пользователя (публичный ip) и страна будет определяться как ip адрес и страна сервера.</li>\\n            <li>Создание \\\"Dark VPN\\\" сервера. Пользователи будут выходить в интернет через сеть TOR. Публичный ip адрес и страна пользователя будут меняться случайным образом каждые 15-20 минут. Сайты *.onion будут доступны напрямую.</li>\\n            <li>Настройка \\\"Админ ВПН\\\". Установка администраторских сервисов и панелей управления для администрирования.</li>\\n            <li>Финальная настройка файрвола.</li>\\n          </ul>\\n          <p class=\\\"mat-body-1\\\">\\n            После завершения установки вы перейдёте к панели управления автоматически.\\n          </p>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n<div class=\\\"grid-container\\\">\\n  <h2 class=\\\"mat-h2\\\">Вопросы и ответы</h2>\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"300\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content class=\\\"dashboard-card-content\\\" style=\\\"text-align:left;\\\">\\n\\n          <h3 class=\\\"mat-h3\\\">Ничего не происходит.</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          Скорее всего на сервере генерируются ключи - на слабых серверах это может длиться до 10и минут. В данный момент требуется создать два vpn сервера, так что суммарно это можно занять до 20 минут. Не закрывайте страницу. Если всё длится уже дольше получаса без изменений - есть вероятность, что что-то всё же пошло не так. Попробуйте открыть панель управления по адресу <a href=\\\"http://10.1.0.1\\\" _target=\\\"blank\\\">http://10.1.0.1</a> - если ничего не вышло,  Вам понадобятся навыки linux администрирования и <a href=\\\"http://vpnface-lite.rtfd.io/\\\" target=\\\"_blank\\\">online документация</a>. Сервер доступен для ssh подключения по адресу 10.1.0.1\\n          </p>\\n\\n          <app-help-faq></app-help-faq>\\n\\n          <h3 class=\\\"mat-h3\\\">Справка</h3>\\n          <p class=\\\"mat-body-1\\\">\\n          После установки вы всегда сможете найти справочную информацию в разделе \\\"справка\\\" <mat-icon>help_outline</mat-icon>. Внутренняя документация так же станет доступна после завершения установки.\\n          </p>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-installer2',\n  templateUrl: './installer2.component.html',\n  styleUrls: ['./installer2.component.css']\n})\nexport class Installer2Component implements OnInit {\n\n  constructor(private api: APIService) { }\n\n  ngOnInit() {\n    this.api._title = 'Установка. шаг 3'\n    this.api._hasMenu = false\n    this.api.finilizeInstall().subscribe((start)=>{})\n  }\n\n}\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n  margin: 0 8pt;\\n}\\n\\n.full-width {\\n  width: 50%;\\n}\\n\\n.err-msg {\\n  color: #f00;\\n}\\n\\np {\\n  font-family: Roboto,\\\"Helvetica Neue Light\\\",\\\"Helvetica Neue\\\",Helvetica,Arial,\\\"Lucida Grande\\\",sans-serif;\\n}\\n\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <mat-grid-list cols=\\\"1\\\" [rowHeight]=\\\"85\\\">\\n    <mat-grid-tile [colspan]=\\\"1\\\" [rowspan]=\\\"1\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n          <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css']\n})\nexport class LoaderComponent implements OnInit {\n\n  constructor(private api: APIService) { }\n\n  ngOnInit() {\n    this.api._title = 'Загрузка'\n  }\n\n}\n","export class Logentry {\n\n  constructor(\n    public type:string = '',\n    public key:string = '',\n    public msg:string = ''\n  ){}\n\n}\n","module.exports = \"#logger\\n{\\n  position: fixed;\\n  bottom: 0px;\\n  right: 0px;\\n  margin: 0 24px 8px 0;\\n  width: 40pt;\\n  height: 40pt;\\n  z-index: 2;\\n}\\n\\n#last-logs\\n{\\n  position: fixed;\\n  bottom: 0px;\\n  right: 0px;\\n  margin: 0 24pt 52pt 0;\\n  width: 250pt;\\n  height: auto;\\n  z-index: 2;\\n}\\n\\n\"","module.exports = \"<div id=\\\"last-logs\\\">\\n  <div class=\\\"line-entry\\\" *ngFor=\\\"let le of _logs\\\">\\n    <app-logline\\n      [lline]=\\\"le\\\"></app-logline>\\n  </div>\\n</div>\\n<div id=\\\"logger\\\">\\n  <img (click)=\\\"say()\\\" width=\\\"100%\\\" src=\\\"/dr80.png\\\"/>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\nimport { Logentry } from '../logentry'\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-logger',\n  templateUrl: './logger.component.html',\n  styleUrls: ['./logger.component.css']\n})\nexport class LoggerComponent implements OnInit {\n\n  public _logs:Logentry[] = []\n\n  constructor(private api: APIService) {}\n\n  ngOnInit() {\n    setInterval(()=>{\n      this.updateLogs()\n    },1000)\n  }\n\n  updateLogs()\n  {\n    this.api.lastLogs().subscribe((logs:Logentry[])=>{\n      logs.forEach((l:Logentry)=>{\n        this._logs.push(l)\n      })\n    })\n  }\n\n  say()\n  {\n    const sayings = [\n      'Если ты это читаешь - ты и есть сопротивление',\n      'Учись всегда - мир меняется быстрее тебя',\n      'DIGITAL RESISTANCE',\n      'Ты - это то, как ты сопротивляешься..',\n      'TOR - не панацея. почитай про безопасность в TOR'\n    ]\n    var x = Math.floor((Math.random() * sayings.length))\n    this._logs.push(new Logentry('log','~~',sayings[x]))\n  }\n\n}\n","module.exports = \".log-entry\\n{\\n  font-size: 60%;\\n  color: #333;\\n  text-align: right;\\n  font-family: 'Ubuntu mono', monospace;\\n  margin: -6pt 0;\\n}\\n\\n.log-entry .key-w {\\n  margin-left: 4pt;\\n}\\n\\n.key-b {\\n  color: #000;\\n}\\n\\n.key-log {\\n  color: #009;\\n}\\n\\n.key-success {\\n  color: #090;\\n}\\n\\n.key-error {\\n  color: #900;\\n}\\n\\n.key-test {\\n  color: #990;\\n}\\n\"","module.exports = \"<div *ngIf=\\\"state=='visible'\\\" class=\\\"log-entry mat-body-1 log-{{lline.type}}\\\">\\n  <span class=\\\"msg msg-{{lline.type}}\\\">{{lline.msg}}</span>\\n  <span class=\\\"key-w\\\"><span class=\\\"key-b key-bl\\\">[</span><span class=\\\"key key-{{lline.type}}\\\">{{lline.key}}</span><span class=\\\"key-b key-bl\\\">]</span></span>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\n\nimport { Logentry } from '../logentry'\n\n@Component({\n  selector: 'app-logline',\n  templateUrl: './logline.component.html',\n  styleUrls: ['./logline.component.css']\n})\nexport class LoglineComponent implements OnInit {\n\n  @Input() lline:Logentry\n  public state:string = 'visible'\n\n  constructor() { }\n\n  ngOnInit() {\n    setTimeout(()=>{\n      this.toggleState()\n    },35000)\n  }\n\n  toggleState()\n  {\n    this.state = this.state == 'visible' ? 'invislble' : 'visible'\n  }\n\n}\n","module.exports = \".page-container {\\n  margin: 20px;\\n}\\n\\n.table-container {\\n  margin: 20px;\\n}\\n\\n.spacer {\\n  flex: 1 1 auto;\\n}\\n\\n.table-header h1 {\\n  display: inline-block;\\n}\\n\\n.mat-toolbar-row, .mat-toolbar-single-row\\n{\\n  background-color: inherit;\\n  font-weight: lighter;\\n}\\n\\n.mat-column-blocked {\\n  flex: 0 0 40pt;\\n}\\n\\n.mat-column-actions {\\n  flex: 0 0 120pt;\\n  justify-content: flex-end;\\n}\\n\\nmat-icon.a4\\n{\\n  position: relative;\\n  top: 4pt;\\n}\\n\\np.desc {\\n  margin: 4pt 16pt;\\n  font-size: 80%;\\n  text-align: justify;\\n}\\n\"","module.exports = \"<div class=\\\"page-container\\\">\\n  <mat-toolbar>\\n    <span>Список ключей</span>\\n    <span class=\\\"spacer\\\"></span>\\n    <span class=\\\"add\\\"><button (click)=\\\"addKey()\\\" mat-button color=\\\"primary\\\"><mat-icon>add</mat-icon>Добавить ключ</button></span>\\n  </mat-toolbar>\\n\\n  <p class=\\\"desc\\\">{{srv?.desc}}</p>\\n  <p class=\\\"desc\\\">Сервер может иметь неограниченое количеств ключей, но ограничен {{srv?.maxclients}} одновременными подключениями.</p>\\n\\n  <div class=\\\"table-container\\\">\\n    <mat-table #table [dataSource]=\\\"dataSource\\\" class=\\\"clients-table\\\" matSort aria-label=\\\"Elements\\\">\\n\\n      <!-- Status Column -->\\n      <ng-container matColumnDef=\\\"blocked\\\">\\n        <mat-header-cell mat-sort-header *matHeaderCellDef>\\n            <mat-icon>vpn_lock</mat-icon>\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          <span *ngIf=\\\"row.blocked\\\"><mat-icon class=\\\"a4\\\">no_encryption</mat-icon></span>\\n          <span *ngIf=\\\"!row.blocked\\\"><mat-icon class=\\\"a4\\\" color=\\\"primary\\\">vpn_lock</mat-icon></span>\\n        </mat-cell>\\n      </ng-container>\\n \\n      <!-- Code Column -->\\n      <ng-container matColumnDef=\\\"code\\\">\\n        <mat-header-cell mat-sort-header *matHeaderCellDef>Ключ</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          {{row.code}}\\n        </mat-cell>\\n      </ng-container>\\n\\n      <!-- Actions Column -->\\n      <ng-container matColumnDef=\\\"actions\\\">\\n        <mat-header-cell *matHeaderCellDef>Действия</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          <div *ngIf=\\\"_locked[row.code]\\\" style=\\\"width:100%\\\">\\n            <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n          </div>\\n          <div *ngIf=\\\"!_locked[row.code]\\\">\\n\\n            <div *ngIf=\\\"row.blocked\\\">\\n              <button mat-icon-button disabled>\\n                <mat-icon>get_app</mat-icon>\\n              </button>\\n  \\n              <button\\n                mat-icon-button\\n                title=\\\"Разблокировать\\\"\\n                color=\\\"primary\\\"\\n                (click)=\\\"unlockKey(row.code)\\\"\\n              >\\n                <mat-icon>vpn_lock</mat-icon>\\n              </button>\\n            </div>\\n\\n            <div *ngIf=\\\"!row.blocked\\\">\\n              <button\\n                mat-icon-button\\n                title=\\\"Скачать\\\"\\n                color=\\\"primary\\\"\\n                (click)=\\\"grabKey(row.code)\\\"\\n              >\\n                <mat-icon>get_app</mat-icon>\\n              </button>\\n \\n              <button\\n                mat-icon-button\\n                color=\\\"warn\\\"\\n                title=\\\"Заблокировать\\\"\\n                (click)=\\\"lockKey(row.code)\\\"\\n              >\\n                <mat-icon>no_encryption</mat-icon>\\n              </button>\\n            </div>\\n\\n          </div>\\n        </mat-cell>\\n      </ng-container>\\n\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n    </mat-table>\\n    <mat-paginator #paginator\\n      [length]=\\\"dataSource?.data.length\\\"\\n      [pageIndex]=\\\"0\\\"\\n      [pageSize]=\\\"10\\\"\\n      [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"\\n      >\\n    </mat-paginator>\\n  </div>\\n</div>\\n\\n\\n\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router'\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog'\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { switchMap } from 'rxjs/operators'\nimport { APIService } from '../api.service'\nimport { Vpnserver } from '../vpnserver'\nimport { Vpnclient } from '../vpnclient'\nimport { VpnuserdialogComponent } from '../vpnuserdialog/vpnuserdialog.component'\nimport { WarnDialogComponent } from '../warn-dialog/warn-dialog.component'\nimport { ClientsTableDataSource } from './vpnserver.datasource'\n\n\n@Component({\n  selector: 'app-vpnserver',\n  templateUrl: './vpnserver.component.html',\n  styleUrls: ['./vpnserver.component.css']\n})\nexport class VpnserverComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: ClientsTableDataSource\n  displayedColumns = ['blocked','code','actions'];\n\n  srv: Vpnserver\n\n  public _locked:any ={}\n\n  constructor(public dialog: MatDialog,private api: APIService,private router:Router,private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.api._hasMenu = true\n    this.route.paramMap.subscribe((p:ParamMap)=>{\n      this.reload(p.get('code'))\n    })\n  }\n\n  reload(code:string)\n  {\n    this.api.loadServer(code).subscribe((srv)=>{\n      this.srv = srv\n      this.api._title = this.srv.name\n      if (this.srv.type == 'public')\n        this.api._ticon = 'cloud_queue'\n      if (this.srv.type == 'root')\n        this.api._ticon = 'cloud_off'\n      if (this.srv.type == 'dark')\n        this.api._ticon = 'cloud_circle'\n      this.dataSource = new ClientsTableDataSource(this.srv.clients,this.paginator,this.sort)\n      //this.dataSource = this.srv.clients\n    })\n  }\n\n  addKey()\n  {\n    let d = this.dialog.open(VpnuserdialogComponent,{\n      width: '75%',\n      data: this.srv.code\n    })\n    d.afterClosed().subscribe((acc) => {\n      if (acc)\n        this.reload(this.srv.code)\n    });\n  }\n\n  grabKey(key:string)\n  {\n    this.api.grabKey(key+'@'+this.srv.code)\n  }\n\n  lockKey(key:string)\n  {\n    let d = this.dialog.open(WarnDialogComponent,{\n      width: '75%',\n      data: {\n        title: `Заблокировать ключ <${key}>?`,\n        message: 'Пользователь не сможет подключиться к vpn серверу.<br/>Если пользователь подключён в данный момент - соединение будет разорвано.',\n        ok: 'Заблокировать'\n      }\n    })\n    d.afterClosed().subscribe((doLock:boolean=false)=>{\n      if (!doLock)\n        return\n      this._locked[key]=true\n      this.api.lockKey(key+'@'+this.srv.code).subscribe((res)=>{\n        this.reload(this.srv.code)\n        this._locked[key]=false\n      })\n    })\n  }\n\n  unlockKey(key:string)\n  {\n    let d = this.dialog.open(WarnDialogComponent,{\n      width: '75%',\n      data: {\n        title: `Разблокировать ключ <${key}>?`,\n        message: 'Пользователь сможет подключиться к vpn серверу.',\n        ok: 'Разблокировать'\n      }\n    })\n    d.afterClosed().subscribe((doUnLock:boolean=false)=>{\n      if (!doUnLock)\n        return\n      this._locked[key]=true\n      this.api.unlockKey(key+'@'+this.srv.code).subscribe((res)=>{\n        this.reload(this.srv.code)\n        this._locked[key]=false\n      })\n    })\n  }\n\n}\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\nimport { Vpnclient } from '../vpnclient'\n\nexport class ClientsTableDataSource extends DataSource<Vpnclient> {\n    \n  constructor(public data: Vpnclient[],private paginator: MatPaginator, private sort: MatSort) {\n    super();\n  }\n    \n  connect(): Observable<Vpnclient[]> {\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n    \n    this.paginator.length = this.data.length;\n    \n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n    \n  disconnect() {}\n  \n  private getPagedData(data: Vpnclient[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n    \n  private getSortedData(data: Vpnclient[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n    \n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'code': return compare(a.code, b.code, isAsc);\n        case 'blocked': return compare(!!a.blocked, !!b.blocked, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n    \nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n    \n","module.exports = \".half-width {\\n  width: 50%;\\n}\\n\\n.ac {\\n  text-align:center;\\n}\\n\\n.spacer {\\n  flex: 1 1 auto;\\n}\\n\"","module.exports = \"<h2 class=\\\"ac\\\" mat-dialog-title>Новый VPN ключ</h2>\\n<mat-dialog-content class=\\\"ac\\\">\\n  <mat-form-field class=\\\"half-width\\\">\\n    <input\\n      matInput\\n      required\\n      (keydown)=\\\"keyDownF($event)\\\"\\n      maxlength=\\\"16\\\"\\n      [disabled]=\\\"_lock\\\"\\n      [(ngModel)]=\\\"_account\\\"\\n      placeholder=\\\"Название аккаунта\\\">\\n    <mat-hint>Английские буквы и цифры. Первый символ - буква.</mat-hint>\\n    <mat-hint align=\\\"end\\\">{{_account.length}} / 16</mat-hint>\\n  </mat-form-field>\\n  <div class=\\\"p-body-1\\\" *ngIf=\\\"_err!=''\\\" style=\\\"color:#a00;\\\">{{_err}}</div>\\n  <div *ngIf=\\\"_lock\\\" class=\\\"mat-body-1\\\" style=\\\"margin-top:20pt;\\\">\\n    <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions >\\n  <span class=\\\"spacer\\\"></span>\\n  <button\\n    [disabled]=\\\"_lock\\\"\\n    mat-button\\n    [mat-dialog-close]=\\\"null\\\"\\n  >Отмена</button>\\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\\n  <button\\n    mat-button\\n    [disabled]=\\\"_lock\\\"\\n    (click)=\\\"go()\\\"\\n    color=\\\"primary\\\"\\n  >Создать</button>\\n  <span class=\\\"spacer\\\"></span>\\n</mat-dialog-actions>\\n\"","import { Component, Inject } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog'\nimport { APIService } from '../api.service'\n\n@Component({\n  selector: 'app-vpnuserdialog',\n  templateUrl: './vpnuserdialog.component.html',\n  styleUrls: ['./vpnuserdialog.component.css']\n})\nexport class VpnuserdialogComponent {\n\n  public _account: string = ''\n  public _err:string = ''\n  public _lock:boolean = false\n\n  constructor(private api:APIService,public dialogRef: MatDialogRef<VpnuserdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  keyDownF(e) {\n    if(e.keyCode == 13)\n      this.go()\n  }\n\n  go()\n  {\n    let rx = /^[a-zA-Z][a-zA-Z0-9]{1,15}$/\n    if (!rx.test(this._account))\n    {\n      this._err = 'Некорректно'\n      setTimeout(()=>{\n        this._err = ''\n      },2000)\n      return\n    }\n    this._lock = true\n    this.api.createKey(this.data,this._account).subscribe((k2)=>{\n      this.dialogRef.close(this._account)\n    })\n  }\n}\n","module.exports = \".half-width {\\n  width: 50%;\\n}\\n\\n.ac {\\n  text-align:center;\\n  padding-bottom: 4pt;\\n}\\n\\n.spacer {\\n  flex: 1 1 auto;\\n}\\n\"","module.exports = \"<h2 class=\\\"ac\\\" mat-dialog-title>{{data.title}}</h2>\\n<mat-dialog-content class=\\\"ac\\\" [innerHtml]=\\\"data.message\\\">\\n</mat-dialog-content>\\n<mat-dialog-actions >\\n  <span class=\\\"spacer\\\"></span>\\n  <button mat-button [mat-dialog-close]=\\\"false\\\">Отмена</button>\\n  <button mat-button color=\\\"primary\\\" [mat-dialog-close]=\\\"true\\\">{{data.ok}}</button>\\n  <span class=\\\"spacer\\\"></span>\\n</mat-dialog-actions>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog'\n\n@Component({\n  selector: 'app-warn-dialog',\n  templateUrl: './warn-dialog.component.html',\n  styleUrls: ['./warn-dialog.component.css']\n})\nexport class WarnDialogComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<WarnDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}